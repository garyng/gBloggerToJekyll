<h1>【这个系列中..】</h1><p><a href="http://garyngzhongbo.blogspot.com/2013/10/bloggerc-blogger-api-v31.html" target="_blank">[教程][Blogger][C#] Blogger API v3教程#1 —— 前言</a></p><p><a href="http://garyngzhongbo.blogspot.com/2013/10/bloggerc-blogger-api-v3-2-blogger-api.html" target="_blank">[教程][Blogger][C#] Blogger API v3 教程#2 —— 申请 Blogger API 的使用权限</a></p><p><a href="http://garyngzhongbo.blogspot.com/2013/10/bloggerc-blogger-api-v3-3-api-keyclient.html" target="_blank">[教程][Blogger][C#] Blogger API v3 教程#3 —— 获取API Key、Client ID 和 Client Secret</a></p><p><a href="http://garyngzhongbo.blogspot.com/2013/10/bloggerc-blogger-api-v3-4-reference.html" target="_blank">[教程][Blogger][C#] Blogger API v3 教程#4 —— 设置开发环境、安装插件、添加Reference</a></p><p><a href="http://garyngzhongbo.blogspot.com/2013/10/bloggerc-blogger-api-v3-5-blog-id.html" target="_blank">[教程][Blogger][C#] Blogger API v3 教程#5 —— 获取Blog Id</a></p><p><a href="http://garyngzhongbo.blogspot.com/2013/10/bloggerc-blogger-api-v3-6oauth-20.html" target="_blank">[教程][Blogger][C#] Blogger API v3 教程#6——OAuth 2.0 认证</a></p><p><a href="http://garyngzhongbo.blogspot.com/2013/10/bloggerc-blogger-api-v3-7.html" target="_blank">[教程][Blogger][C#] Blogger API v3 教程#7——获取帖子列表</a></p><p><a href="http://garyngzhongbo.blogspot.com/2013/10/bloggerc-blogger-api-v3-8.html" target="_blank">[教程][Blogger][C#] Blogger API v3 教程#8——更改帖子标题</a></p><br />
<h1>【获取帖子列表】</h1><pre>有BlogID 了万事好办..</pre><pre>Blogger API的数据模型是这样的：
<a href="file:///C:/Users/GaryNg/AppData/Local/Temp/WindowsLiveWriter-429641856/supfiles53205C5/image[11].png"></a><a href="http://lh4.ggpht.com/-ObwkTpCissE/Ule_bLRYSHI/AAAAAAAAFIY/HS1i1CfnWHY/s1600-h/image_thumb%25255B3%25255D%25255B2%25255D.png"><img alt="image_thumb[3]" border="0" height="386" src="http://lh5.ggpht.com/-KCgonFOCq70/Ule_b43mWnI/AAAAAAAAFIg/WFM4005TLsQ/image_thumb%25255B3%25255D_thumb.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image_thumb[3]" width="512" /></a></pre><pre>Blogs Resource 下有Posts Resource</pre><pre>所以我们创建一个PostsResource变量，传入blogService</pre><pre class="brush: csharp">PostsResource postsRes = new PostsResource(blogService);
</pre><br />
<pre>&nbsp;</pre><pre>有一API 叫做 posts.list</pre><pre><a href="file:///C:/Users/GaryNg/AppData/Local/Temp/WindowsLiveWriter-429641856/supfiles53205C5/image[14].png"></a><a href="http://lh5.ggpht.com/-uJ04K9AmVSg/Ule_cRxkWBI/AAAAAAAAFIo/O99n2XkuFyY/s1600-h/image_thumb%25255B4%25255D%25255B2%25255D.png"><img alt="image_thumb[4]" border="0" height="173" src="http://lh3.ggpht.com/-AJ44DHujlgI/Ule_dMy7jaI/AAAAAAAAFIw/2_tHXjfEICQ/image_thumb%25255B4%25255D_thumb.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image_thumb[4]" width="762" /></a></pre><pre>&nbsp;</pre><pre>如上面的GetByUrl Request 一般，PostsResource 也有ListRequest</pre><pre>呼叫PostsResouce 里面的 .List函数，返回一个PostsResource.ListRequest</pre><pre>然后呼叫PostsResource.ListRequest 的.Execute()函数，返回一个PostList 类型</pre><br />
<pre class="brush: csharp">PostsResource postsRes = new PostsResource(blogService);
PostsResource.ListRequest postsListReq = postsRes.List(blog.Id);
PostList posts = postsListReq.Execute();
</pre><br />
<pre>Blogger API 默认返回10个posts，储存在Post.Items中</pre><pre>现在在遍历.Items 然后输出post的 Title</pre><br />
<pre class="brush: csharp">for (int i = 0; i &lt; posts.Items.Count; i++)
{
    Console.WriteLine(posts.Items[i].Title);
}
</pre><br />
<br />
完整代码：<br />
<br />
<pre class="brush: csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Google.Apis.Blogger.v3;
using Google.Apis.Blogger.v3.Data;
using Google.Apis.Services;
using System.Diagnostics;
using Google.Apis.Authentication.OAuth2;
using Google.Apis.Authentication.OAuth2.DotNetOpenAuth;
using DotNetOpenAuth.OAuth2;
using Google.Apis.Util;


namespace BloggerTest
{
    class Program
    {
        static void Main(string[] args)
        {
            string apiKey= "{API-KEY}";
            string blogUrl= "{BLOG-URL}";

            string clientID = "{CLIENT_ID}";
            string clientSec = "{CLIENT_SECRET}";

            NativeApplicationClient provider = new NativeApplicationClient(GoogleAuthenticationServer.Description)
            {
                ClientIdentifier = clientID,
                ClientSecret = clientSec
            };

            OAuth2Authenticator&lt;NativeApplicationClient&gt; auth = new OAuth2Authenticator&lt;NativeApplicationClient&gt;(provider, getAuth);

            BloggerService blogService = new BloggerService(new BaseClientService.Initializer()
            {
                Authenticator = auth,
                ApplicationName = "BloggerTest"
            });


            BlogsResource.GetByUrlRequest getReq = blogService.Blogs.GetByUrl(blogUrl);
            getReq.Key = apiKey;
            Blog blog = getReq.Execute();

            Console.WriteLine("Blog ID: " + blog.Id);
            Console.WriteLine();

            PostsResource postRes = new PostsResource(blogService);
            PostsResource.ListRequest postsListReq = postRes.List(blog.Id);
            PostList posts = postsListReq.Execute();

            for (int i = 0; i &lt; posts.Items.Count; i++)
            {
                Console.WriteLine(posts.Items[i].Title);
            }

            Console.WriteLine();
            Console.WriteLine("Done...");

            Console.ReadKey();



        }

        private static IAuthorizationState getAuth(NativeApplicationClient arg)
        {
            IAuthorizationState state = new AuthorizationState(new[] { BloggerService.Scopes.Blogger.GetStringValue() })
                {
                    Callback = new Uri(NativeApplicationClient.OutOfBandCallbackUrl)
                };
            Uri authUri = arg.RequestUserAuthorization(state);
            Process.Start(authUri.ToString());
            Console.WriteLine("Please enter auth code:");
            string authCode = Console.ReadLine();
            return arg.ProcessUserAuthorization(authCode, state);
        }


    }
}



</pre><br />
<br />
输出结果：<br />
<br />
<a href="http://lh6.ggpht.com/-eX7iOd2gHMw/Ule_dvZwMiI/AAAAAAAAFI4/UXsZKfAOqKs/s1600-h/image%25255B2%25255D.png"><img alt="image" border="0" height="385" src="http://lh3.ggpht.com/-tG6wsSFk9cY/Ule_eZf6zzI/AAAAAAAAFJA/dqR8_GzRs7M/image_thumb.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="667" /></a><br />
<br />
<br />
<br />
<h1>【获取所有帖子】</h1><br />
PostList 里面有个.PageToken和.NextPageToken、.PrevPageToken<br />
<br />
基本上，含义是这样：<br />
<br />
<a href="http://lh5.ggpht.com/-utEF--ktbVU/UlfU8jvb_-I/AAAAAAAAFJQ/OZS1p0fsAxU/s1600-h/unnamed1.png"><img alt="unnamed1" border="0" height="495" src="http://lh6.ggpht.com/-o1poxQCr0N0/UlfU9mLQKyI/AAAAAAAAFJY/AZe2r_MSv-0/unnamed1_thumb.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="unnamed1" width="1273" /></a><br />
<br />
<br />
<br />
所以我们要遍历所有的帖子的话，<br />
<br />
要把.PageToken 设置为 NextPageToken<br />
<br />
然后还要检测当前的PageToken是否为第一个的PageToken （因为我们已经获取过了，所以不用获取了），如果是的话，就break 出 while loop<br />
<br />
所以把之前代码中的<br />
<br />
<pre class="brush: csharp">PostList posts = postsListReq.Execute();
</pre><br />
删除掉<br />
<br />
现在定义一个string为 firstToken<br />
<br />
用来储存第一个NextPageToken<br />
<br />
<pre class="brush: csharp">string firstToken = "";
</pre><br />
<br />
现在就是while loop<br />
<br />
<pre class="brush: csharp">现在就是while loop

while (true)
{
    PostList posts = postsListReq.Execute();
    postsListReq.PageToken = posts.NextPageToken;

    if (firstToken == "")
    {
        firstToken = posts.NextPageToken;
    }
    else if (firstToken != "" &amp;&amp; posts.NextPageToken == firstToken)
    {
        // repeated
        break;
    }

    for (int i = 0; i &lt; posts.Items.Count; i++)
    {
        Console.WriteLine("Title: " + posts.Items[i].Title);
        Console.WriteLine("URL: " + posts.Items[i].Url);
    }

}


</pre><br />
}<br />
<br />
<br />
<br />
完整代码：<br />
<br />
<pre class="brush: csharp">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Google.Apis.Blogger.v3;
using Google.Apis.Blogger.v3.Data;
using Google.Apis.Services;
using System.Diagnostics;
using Google.Apis.Authentication.OAuth2;
using Google.Apis.Authentication.OAuth2.DotNetOpenAuth;
using DotNetOpenAuth.OAuth2;
using Google.Apis.Util;


namespace BloggerTest
{
    class Program
    {
        static void Main(string[] args)
        {
            string apiKey= "{API-KEY}"
            string blogUrl= "{BLOG-URL}"

            string clientID = "{CLIENT_ID}";
            string clientSec = "{CLIENT_SECRET}";
            
            NativeApplicationClient provider = new NativeApplicationClient(GoogleAuthenticationServer.Description)
            {
                ClientIdentifier = clientID,
                ClientSecret = clientSec
            };

            OAuth2Authenticator&lt;NativeApplicationClient&gt; auth = new OAuth2Authenticator&lt;NativeApplicationClient&gt;(provider, getAuth);

            BloggerService blogService = new BloggerService(new BaseClientService.Initializer()
            {
                Authenticator = auth,
                ApplicationName = "BloggerTest"
            });


            BlogsResource.GetByUrlRequest getReq = blogService.Blogs.GetByUrl(blogUrl);
            getReq.Key = apiKey;
            Blog blog = getReq.Execute();

            Console.WriteLine("Blog ID: " + blog.Id);
            Console.WriteLine();

            PostsResource postRes = new PostsResource(blogService);
            PostsResource.ListRequest postsListReq = postRes.List(blog.Id);

            string firstToken = "";

            while (true)
            {
                PostList posts = postsListReq.Execute();
                postsListReq.PageToken = posts.NextPageToken;

                if (firstToken == "")
                {
                    firstToken = posts.NextPageToken;
                }
                else if (firstToken != "" &amp;&amp; posts.NextPageToken == firstToken)
                {
                    // repeated
                    break;
                }

                for (int i = 0; i &lt; posts.Items.Count; i++)
                {
                    Console.WriteLine("Title: " + posts.Items[i].Title);
                    Console.WriteLine("URL: " + posts.Items[i].Url);
                }

            }

            Console.WriteLine();
            Console.WriteLine("Done...");

            Console.ReadKey();



        }

        private static IAuthorizationState getAuth(NativeApplicationClient arg)
        {
            IAuthorizationState state = new AuthorizationState(new[] { BloggerService.Scopes.Blogger.GetStringValue() })
                {
                    Callback = new Uri(NativeApplicationClient.OutOfBandCallbackUrl)
                };
            Uri authUri = arg.RequestUserAuthorization(state);
            Process.Start(authUri.ToString());
            Console.WriteLine("Please enter auth code:");
            string authCode = Console.ReadLine();
            return arg.ProcessUserAuthorization(authCode, state);
        }


    }
}



</pre><br />
<br />
<br />
<br />
输出结果：<br />
<br />
<a href="http://lh3.ggpht.com/-1YXLwoMPOnw/UlfU-XF-eXI/AAAAAAAAFJg/-dqbC9MCCJo/s1600-h/image%25255B5%25255D.png"><img alt="image" border="0" height="743" src="http://lh6.ggpht.com/-XGsogmezQs8/UlfU_csdyzI/AAAAAAAAFJo/li39Jbc6dpE/image_thumb%25255B1%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="661" /></a>